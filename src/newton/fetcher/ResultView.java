/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newton.fetcher;

import newton.resultApi.CBSEResult;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.*;

/**
 *
 * @author Meghdut Mandal
 */
class ResultView extends javax.swing.JPanel {

    @Override
    public void repaint() {
        super.repaint();

    }

    private static final long serialVersionUID = 1L;
    private CBSEResult result;
    private TabelSearchRenderer search;
    private boolean match;

    /**
     *
     * @param pattern
     * @return
     */
    public boolean hasMatch(String pattern) {
        return result.toString().toLowerCase().contains(pattern.toLowerCase());
    }

    /**
     *
     * @param match
     */
    public void setMatch(boolean match) {
        this.match = match;
        // System.out.println("Match set to true " + this.result);
    }

    private void setTableProps(JTable table) {
        table.getTableHeader().setForeground(perInfTable.getForeground());
        // table.getTableHeader().setBackground();
        table.getTableHeader().setFont(perInfTable.getFont());
        table.getTableHeader().setOpaque(false);
        javax.swing.table.DefaultTableCellRenderer tc = new DefaultTableCellRenderer();
        tc.setBackground(new Color(71, 120, 197));
        tc.setForeground(Color.white);
        for (int i = 0; i < table.getModel().getColumnCount(); i++) {
            table.getColumnModel().getColumn(i).setHeaderRenderer(tc);
        }
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
    }

    /**
     *
     * @param sear
     */
    public void setSearch(TabelSearchRenderer sear) {
        this.perInfTable.setDefaultRenderer(Object.class, sear);
        this.subInfTabel.setDefaultRenderer(Object.class, sear);
        this.search = sear;

    }

    /**
     *
     * @param result
     */
    public ResultView(CBSEResult result) {
        this.result = result;
        initComponents();
        this.perInfoPanel.removeAll();

        this.perInfoPanel.add(this.perInfTable.getTableHeader(), BorderLayout.NORTH);
        this.perInfoPanel.add(this.perInfTable, BorderLayout.CENTER);
        this.setTableProps(perInfTable);
        //getPIRow();
        this.subInfoPanel.removeAll();
        this.subInfoPanel.add(this.subInfTabel.getTableHeader(), BorderLayout.NORTH);
        this.subInfoPanel.add(this.subInfTabel, BorderLayout.CENTER);
        this.setTableProps(subInfTabel);

        //System.out.println(getSIRow());
    }

    /**
     *
     * @return
     */
    @SuppressWarnings("UseOfObsoleteCollectionType")

    public CBSEResult getResult() {
        return result;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        perInfoPanel = new javax.swing.JPanel();
        perInfTable = new javax.swing.JTable(this.result.getPIRow(),this.result.genPIColNames());
        subInfoPanel = new javax.swing.JPanel();
        subInfTabel = new javax.swing.JTable(

                //this.result.getSIRow().toArray()
                Utility.to2dArray(result.getSIRow())
                , this.result.getSIColNames().toArray());

        setOpaque(false);

        perInfoPanel.setName("perInfoPanel"); // NOI18N
        perInfoPanel.setLayout(new java.awt.BorderLayout());

        perInfTable.setBackground(getBackground());
        perInfTable.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        perInfTable.setGridColor(new java.awt.Color(204, 204, 204));
        perInfTable.setName("perInfTable"); // NOI18N
        perInfTable.setOpaque(false);
        perInfTable.setRowSelectionAllowed(false);
        perInfoPanel.add(perInfTable, java.awt.BorderLayout.PAGE_END);

        subInfoPanel.setBackground(getBackground());
        subInfoPanel.setName("subInfoPanel"); // NOI18N
        subInfoPanel.setOpaque(false);
        subInfoPanel.setLayout(new java.awt.BorderLayout());

        subInfTabel.setFont(perInfTable.getFont());
        subInfTabel.setForeground(perInfTable.getForeground());
        subInfTabel.setGridColor(perInfTable.getGridColor());
        subInfTabel.setName("subInfTabel"); // NOI18N
        subInfTabel.setOpaque(false);
        subInfoPanel.add(subInfTabel, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(perInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(subInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(perInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 15, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable perInfTable;
    private javax.swing.JPanel perInfoPanel;
    private javax.swing.JTable subInfTabel;
    private javax.swing.JPanel subInfoPanel;
    // End of variables declaration//GEN-END:variables
}
